// openconfig.gsii.v1.qos is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - /Users/robjs/go/src/github.com/openconfig/gsii/v1/yang/qos/gsii-qos-proto.yang
// Include paths:
//   - /Users/robjs/go/src/github.com/openconfig/gsii/deps/public/...

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: v1/proto/openconfig/gsii/v1/qos/qos.proto

package qos

import (
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Qos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedulerPolicy []*Qos_SchedulerPolicyKey `protobuf:"bytes,206871269,rep,name=scheduler_policy,json=schedulerPolicy,proto3" json:"scheduler_policy,omitempty"`
}

func (x *Qos) Reset() {
	*x = Qos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_openconfig_gsii_v1_qos_qos_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos) ProtoMessage() {}

func (x *Qos) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_openconfig_gsii_v1_qos_qos_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos.ProtoReflect.Descriptor instead.
func (*Qos) Descriptor() ([]byte, []int) {
	return file_v1_proto_openconfig_gsii_v1_qos_qos_proto_rawDescGZIP(), []int{0}
}

func (x *Qos) GetSchedulerPolicy() []*Qos_SchedulerPolicyKey {
	if x != nil {
		return x.SchedulerPolicy
	}
	return nil
}

type Qos_SchedulerPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scheduler []*Qos_SchedulerPolicy_SchedulerKey `protobuf:"bytes,264770124,rep,name=scheduler,proto3" json:"scheduler,omitempty"`
}

func (x *Qos_SchedulerPolicy) Reset() {
	*x = Qos_SchedulerPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_openconfig_gsii_v1_qos_qos_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicy) ProtoMessage() {}

func (x *Qos_SchedulerPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_openconfig_gsii_v1_qos_qos_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicy.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicy) Descriptor() ([]byte, []int) {
	return file_v1_proto_openconfig_gsii_v1_qos_qos_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Qos_SchedulerPolicy) GetScheduler() []*Qos_SchedulerPolicy_SchedulerKey {
	if x != nil {
		return x.Scheduler
	}
	return nil
}

type Qos_SchedulerPolicyKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SchedulerPolicy *Qos_SchedulerPolicy `protobuf:"bytes,2,opt,name=scheduler_policy,json=schedulerPolicy,proto3" json:"scheduler_policy,omitempty"`
}

func (x *Qos_SchedulerPolicyKey) Reset() {
	*x = Qos_SchedulerPolicyKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_openconfig_gsii_v1_qos_qos_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicyKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicyKey) ProtoMessage() {}

func (x *Qos_SchedulerPolicyKey) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_openconfig_gsii_v1_qos_qos_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicyKey.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicyKey) Descriptor() ([]byte, []int) {
	return file_v1_proto_openconfig_gsii_v1_qos_qos_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Qos_SchedulerPolicyKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_SchedulerPolicyKey) GetSchedulerPolicy() *Qos_SchedulerPolicy {
	if x != nil {
		return x.SchedulerPolicy
	}
	return nil
}

type Qos_SchedulerPolicy_Scheduler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OneRateTwoColor *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor `protobuf:"bytes,332577075,opt,name=one_rate_two_color,json=oneRateTwoColor,proto3" json:"one_rate_two_color,omitempty"`
}

func (x *Qos_SchedulerPolicy_Scheduler) Reset() {
	*x = Qos_SchedulerPolicy_Scheduler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_openconfig_gsii_v1_qos_qos_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicy_Scheduler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicy_Scheduler) ProtoMessage() {}

func (x *Qos_SchedulerPolicy_Scheduler) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_openconfig_gsii_v1_qos_qos_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicy_Scheduler.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicy_Scheduler) Descriptor() ([]byte, []int) {
	return file_v1_proto_openconfig_gsii_v1_qos_qos_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Qos_SchedulerPolicy_Scheduler) GetOneRateTwoColor() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor {
	if x != nil {
		return x.OneRateTwoColor
	}
	return nil
}

type Qos_SchedulerPolicy_SchedulerKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence  uint64                         `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Scheduler *Qos_SchedulerPolicy_Scheduler `protobuf:"bytes,2,opt,name=scheduler,proto3" json:"scheduler,omitempty"`
}

func (x *Qos_SchedulerPolicy_SchedulerKey) Reset() {
	*x = Qos_SchedulerPolicy_SchedulerKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_openconfig_gsii_v1_qos_qos_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicy_SchedulerKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicy_SchedulerKey) ProtoMessage() {}

func (x *Qos_SchedulerPolicy_SchedulerKey) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_openconfig_gsii_v1_qos_qos_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicy_SchedulerKey.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicy_SchedulerKey) Descriptor() ([]byte, []int) {
	return file_v1_proto_openconfig_gsii_v1_qos_qos_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Qos_SchedulerPolicy_SchedulerKey) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Qos_SchedulerPolicy_SchedulerKey) GetScheduler() *Qos_SchedulerPolicy_Scheduler {
	if x != nil {
		return x.Scheduler
	}
	return nil
}

type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cir *ywrapper.UintValue `protobuf:"bytes,451838569,opt,name=cir,proto3" json:"cir,omitempty"`
}

func (x *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) Reset() {
	*x = Qos_SchedulerPolicy_Scheduler_OneRateTwoColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_openconfig_gsii_v1_qos_qos_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) ProtoMessage() {}

func (x *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_openconfig_gsii_v1_qos_qos_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_SchedulerPolicy_Scheduler_OneRateTwoColor.ProtoReflect.Descriptor instead.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) Descriptor() ([]byte, []int) {
	return file_v1_proto_openconfig_gsii_v1_qos_qos_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetCir() *ywrapper.UintValue {
	if x != nil {
		return x.Cir
	}
	return nil
}

var File_v1_proto_openconfig_gsii_v1_qos_qos_proto protoreflect.FileDescriptor

var file_v1_proto_openconfig_gsii_v1_qos_qos_proto_rawDesc = []byte{
	0x0a, 0x29, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x73, 0x69, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x6f,
	0x73, 0x2f, 0x71, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x67, 0x73, 0x69, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x71, 0x6f, 0x73, 0x1a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x79, 0x67, 0x6f, 0x74, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2f, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x79, 0x67, 0x6f, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x79, 0x65, 0x78, 0x74, 0x2f, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc9, 0x09, 0x0a, 0x03, 0x51, 0x6f, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x10, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xe5, 0xb5, 0xd2,
	0x62, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x67, 0x73, 0x69, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4b, 0x65, 0x79, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x1a, 0xcb, 0x06, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x9b, 0x01, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0xcc, 0xa4, 0xa0, 0x7e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x67, 0x73, 0x69, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x71, 0x6f,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x1a, 0xfb, 0x02, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x12, 0xcb, 0x01, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0xb3, 0xf2, 0xca, 0x9e, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x67, 0x73, 0x69, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x6e, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x54, 0x77, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x53, 0x82, 0x41, 0x50,
	0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6e,
	0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x52, 0x61, 0x74, 0x65, 0x54, 0x77, 0x6f, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x1a, 0x9f, 0x01, 0x0a, 0x0f, 0x4f, 0x6e, 0x65, 0x52, 0x61, 0x74, 0x65, 0x54, 0x77, 0x6f,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x8b, 0x01, 0x0a, 0x03, 0x63, 0x69, 0x72, 0x18, 0xe9, 0x84,
	0xba, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x60, 0x82, 0x41,
	0x5d, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6f,
	0x6e, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x77, 0x6f, 0x2d, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x2f, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x2f, 0x63, 0x69, 0x72, 0x52, 0x03,
	0x63, 0x69, 0x72, 0x1a, 0x9b, 0x02, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x12, 0xb5, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x98, 0x01, 0x82, 0x41, 0x94, 0x01, 0x2f, 0x71,
	0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x7c, 0x2f, 0x71, 0x6f, 0x73,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x09,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x67, 0x73, 0x69,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x1a, 0xe7, 0x01, 0x0a, 0x12, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x79, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x71, 0x6f, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x7c,
	0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x67, 0x73, 0x69, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x3c, 0x5a, 0x3a, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x73, 0x69, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x73,
	0x69, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_v1_proto_openconfig_gsii_v1_qos_qos_proto_rawDescOnce sync.Once
	file_v1_proto_openconfig_gsii_v1_qos_qos_proto_rawDescData = file_v1_proto_openconfig_gsii_v1_qos_qos_proto_rawDesc
)

func file_v1_proto_openconfig_gsii_v1_qos_qos_proto_rawDescGZIP() []byte {
	file_v1_proto_openconfig_gsii_v1_qos_qos_proto_rawDescOnce.Do(func() {
		file_v1_proto_openconfig_gsii_v1_qos_qos_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_proto_openconfig_gsii_v1_qos_qos_proto_rawDescData)
	})
	return file_v1_proto_openconfig_gsii_v1_qos_qos_proto_rawDescData
}

var file_v1_proto_openconfig_gsii_v1_qos_qos_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_v1_proto_openconfig_gsii_v1_qos_qos_proto_goTypes = []any{
	(*Qos)(nil),                                           // 0: openconfig.gsii.v1.qos.Qos
	(*Qos_SchedulerPolicy)(nil),                           // 1: openconfig.gsii.v1.qos.Qos.SchedulerPolicy
	(*Qos_SchedulerPolicyKey)(nil),                        // 2: openconfig.gsii.v1.qos.Qos.SchedulerPolicyKey
	(*Qos_SchedulerPolicy_Scheduler)(nil),                 // 3: openconfig.gsii.v1.qos.Qos.SchedulerPolicy.Scheduler
	(*Qos_SchedulerPolicy_SchedulerKey)(nil),              // 4: openconfig.gsii.v1.qos.Qos.SchedulerPolicy.SchedulerKey
	(*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor)(nil), // 5: openconfig.gsii.v1.qos.Qos.SchedulerPolicy.Scheduler.OneRateTwoColor
	(*ywrapper.UintValue)(nil),                            // 6: ywrapper.UintValue
}
var file_v1_proto_openconfig_gsii_v1_qos_qos_proto_depIdxs = []int32{
	2, // 0: openconfig.gsii.v1.qos.Qos.scheduler_policy:type_name -> openconfig.gsii.v1.qos.Qos.SchedulerPolicyKey
	4, // 1: openconfig.gsii.v1.qos.Qos.SchedulerPolicy.scheduler:type_name -> openconfig.gsii.v1.qos.Qos.SchedulerPolicy.SchedulerKey
	1, // 2: openconfig.gsii.v1.qos.Qos.SchedulerPolicyKey.scheduler_policy:type_name -> openconfig.gsii.v1.qos.Qos.SchedulerPolicy
	5, // 3: openconfig.gsii.v1.qos.Qos.SchedulerPolicy.Scheduler.one_rate_two_color:type_name -> openconfig.gsii.v1.qos.Qos.SchedulerPolicy.Scheduler.OneRateTwoColor
	3, // 4: openconfig.gsii.v1.qos.Qos.SchedulerPolicy.SchedulerKey.scheduler:type_name -> openconfig.gsii.v1.qos.Qos.SchedulerPolicy.Scheduler
	6, // 5: openconfig.gsii.v1.qos.Qos.SchedulerPolicy.Scheduler.OneRateTwoColor.cir:type_name -> ywrapper.UintValue
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_v1_proto_openconfig_gsii_v1_qos_qos_proto_init() }
func file_v1_proto_openconfig_gsii_v1_qos_qos_proto_init() {
	if File_v1_proto_openconfig_gsii_v1_qos_qos_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_proto_openconfig_gsii_v1_qos_qos_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Qos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_openconfig_gsii_v1_qos_qos_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Qos_SchedulerPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_openconfig_gsii_v1_qos_qos_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Qos_SchedulerPolicyKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_openconfig_gsii_v1_qos_qos_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Qos_SchedulerPolicy_Scheduler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_openconfig_gsii_v1_qos_qos_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Qos_SchedulerPolicy_SchedulerKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_openconfig_gsii_v1_qos_qos_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_proto_openconfig_gsii_v1_qos_qos_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_proto_openconfig_gsii_v1_qos_qos_proto_goTypes,
		DependencyIndexes: file_v1_proto_openconfig_gsii_v1_qos_qos_proto_depIdxs,
		MessageInfos:      file_v1_proto_openconfig_gsii_v1_qos_qos_proto_msgTypes,
	}.Build()
	File_v1_proto_openconfig_gsii_v1_qos_qos_proto = out.File
	file_v1_proto_openconfig_gsii_v1_qos_qos_proto_rawDesc = nil
	file_v1_proto_openconfig_gsii_v1_qos_qos_proto_goTypes = nil
	file_v1_proto_openconfig_gsii_v1_qos_qos_proto_depIdxs = nil
}
