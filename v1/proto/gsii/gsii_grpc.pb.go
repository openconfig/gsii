// Copyright 2024 The OpenConfig Contributors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: v1/proto/gsii/gsii.proto

package gsii

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GSII_Modify_FullMethodName = "/gsii.v1.gSII/Modify"
)

// GSIIClient is the client API for GSII service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gSII is the gRPC State Injection Interface -- it allows state to be injected
// into a network element. This state is defined to be dynamic and changes
// quickly.  It shares several properties with a traditional "control plane"
// protocol.
//
// gSII is pronounced "gee-see".
type GSIIClient interface {
	// Modify is a stream of updates that update the dynamic state of a target
	// using gRPC. The Modify stream provides a set of updates that are being
	// made to the state of a networking device.
	Modify(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ModifyRequest, ModifyResponse], error)
}

type gSIIClient struct {
	cc grpc.ClientConnInterface
}

func NewGSIIClient(cc grpc.ClientConnInterface) GSIIClient {
	return &gSIIClient{cc}
}

func (c *gSIIClient) Modify(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ModifyRequest, ModifyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GSII_ServiceDesc.Streams[0], GSII_Modify_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ModifyRequest, ModifyResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GSII_ModifyClient = grpc.BidiStreamingClient[ModifyRequest, ModifyResponse]

// GSIIServer is the server API for GSII service.
// All implementations must embed UnimplementedGSIIServer
// for forward compatibility.
//
// gSII is the gRPC State Injection Interface -- it allows state to be injected
// into a network element. This state is defined to be dynamic and changes
// quickly.  It shares several properties with a traditional "control plane"
// protocol.
//
// gSII is pronounced "gee-see".
type GSIIServer interface {
	// Modify is a stream of updates that update the dynamic state of a target
	// using gRPC. The Modify stream provides a set of updates that are being
	// made to the state of a networking device.
	Modify(grpc.BidiStreamingServer[ModifyRequest, ModifyResponse]) error
	mustEmbedUnimplementedGSIIServer()
}

// UnimplementedGSIIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGSIIServer struct{}

func (UnimplementedGSIIServer) Modify(grpc.BidiStreamingServer[ModifyRequest, ModifyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Modify not implemented")
}
func (UnimplementedGSIIServer) mustEmbedUnimplementedGSIIServer() {}
func (UnimplementedGSIIServer) testEmbeddedByValue()              {}

// UnsafeGSIIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GSIIServer will
// result in compilation errors.
type UnsafeGSIIServer interface {
	mustEmbedUnimplementedGSIIServer()
}

func RegisterGSIIServer(s grpc.ServiceRegistrar, srv GSIIServer) {
	// If the following call pancis, it indicates UnimplementedGSIIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GSII_ServiceDesc, srv)
}

func _GSII_Modify_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GSIIServer).Modify(&grpc.GenericServerStream[ModifyRequest, ModifyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GSII_ModifyServer = grpc.BidiStreamingServer[ModifyRequest, ModifyResponse]

// GSII_ServiceDesc is the grpc.ServiceDesc for GSII service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GSII_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gsii.v1.gSII",
	HandlerType: (*GSIIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Modify",
			Handler:       _GSII_Modify_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1/proto/gsii/gsii.proto",
}
